main :: IO ()
main = print ( (  if  ((\x0 ->  x0) )( True )  then  let x0 =  False  in  (  (  ((\x1 ->   ((\x2 ->   False ) )(x0) ) )( ((\x1 ->  x0) )(3) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( True ) ) )( ((\x1 ->   True ) )(9) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )(x0) ) )( ((\x1 ->  x0) )(4) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )(x0) ) )( ((\x1 ->  x0) )(10) )  )  :  []  )  else  let x0 = 3 in  (  (  ((\x1 ->   ((\x2 ->  x2) )( True ) ) )( ((\x1 ->   True ) )(x0) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( True ) ) )( ((\x1 ->   False ) )(4) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( False ) ) )( ((\x1 ->   False ) )(10) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( False ) ) )( ((\x1 ->   False ) )(x0) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( True ) ) )( ((\x1 ->   True ) )(x0) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( False ) ) )( ((\x1 ->   False ) )(9) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( True ) ) )( ((\x1 ->   True ) )(5) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( True ) ) )( ((\x1 ->   True ) )(x0) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( False ) ) )( ((\x1 ->   True ) )(6) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( True ) ) )( ((\x1 ->   True ) )(5) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( ((\x1 ->   True ) )(x0) )  )  :  []  )  ) )