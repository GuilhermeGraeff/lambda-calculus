main :: IO ()
main = print ( let x0 =  let x0 =  if  False  then  (  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  []  )  else  (  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  []  )  in  if  False  thenelse  (  (  (  ( 9 )  :  ( 6 )  :  ( 3 )  :  ( 10 )  :  ( 3 )  :  ( 3 )  :  ( 3 )  :  ( 5 )  :  ( 4 )  :  ( 9 )  :  []  )  )  :  (  (  ( 2 )  :  ( 8 )  :  ( 6 )  :  ( 8 )  :  ( 10 )  :  ( 7 )  :  ( 6 )  :  []  )  )  :  (  (  ( 9 )  :  ( 9 )  :  ( 7 )  :  ( 1 )  :  ( 7 )  :  ( 8 )  :  ( 7 )  :  ( 1 )  :  ( 2 )  :  []  )  )  :  (  (  ( 9 )  :  ( 4 )  :  ( 9 )  :  ( 1 )  :  ( 1 )  :  ( 3 )  :  ( 5 )  :  []  )  )  :  (  (  ( 10 )  :  ( 7 )  :  ( 10 )  :  ( 2 )  :  ( 9 )  :  []  )  )  :  (  (  ( 6 )  :  ( 7 )  :  ( 3 )  :  ( 6 )  :  ( 9 )  :  ( 3 )  :  ( 8 )  :  ( 10 )  :  ( 9 )  :  ( 2 )  :  ( 8 )  :  ( 9 )  :  ( 7 )  :  ( 10 )  :  ( 6 )  :  ( 3 )  :  ( 6 )  :  ( 6 )  :  ( 1 )  :  ( 5 )  :  ( 2 )  :  ( 4 )  :  ( 5 )  :  ( 2 )  :  ( 5 )  :  ( 2 )  :  []  )  )  :  (  (  ( 7 )  :  ( 6 )  :  ( 8 )  :  ( 8 )  :  ( 2 )  :  []  )  )  :  (  (  ( 7 )  :  ( 1 )  :  ( 8 )  :  ( 5 )  :  []  )  )  :  (  (  ( 8 )  :  ( 2 )  :  ( 3 )  :  ( 8 )  :  ( 7 )  :  ( 5 )  :  ( 10 )  :  []  )  )  :  (  (  ( 8 )  :  ( 6 )  :  ( 6 )  :  ( 7 )  :  ( 4 )  :  ( 5 )  :  ( 7 )  :  ( 7 )  :  ( 7 )  :  ( 1 )  :  ( 7 )  :  ( 3 )  :  ( 1 )  :  ( 7 )  :  ( 5 )  :  ( 3 )  :  ( 2 )  :  ( 8 )  :  []  )  )  :  (  (  ( 9 )  :  ( 9 )  :  ( 4 )  :  ( 1 )  :  ( 1 )  :  ( 1 )  :  []  )  )  :  (  (  ( 2 )  :  ( 1 )  :  ( 5 )  :  ( 7 )  :  ( 1 )  :  []  )  )  :  (  (  ( 1 )  :  ( 8 )  :  ( 3 )  :  []  )  )  :  (  (  ( 6 )  :  ( 8 )  :  ( 2 )  :  ( 2 )  :  ( 8 )  :  ( 6 )  :  ( 5 )  :  ( 10 )  :  ( 5 )  :  []  )  )  :  []  )  in  (  let x1 = 5 in  ((\x2 ->   ((\x3 ->   (  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  ) ) )( ((\x3 ->  3) )( False ) ) ) )(x1)  ) )