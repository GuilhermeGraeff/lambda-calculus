main :: IO ()
main = print ( ((\x0 ->  4) )( let x0 =  ((\x0 ->   False ) )(3)  in  if  False  then  (  (  ((\x1 ->  2) )( False )  )  :  (  ((\x1 ->  6) )( True )  )  :  (  ((\x1 ->  6) )(x0)  )  :  (  ((\x1 ->  3) )( True )  )  :  (  ((\x1 ->  10) )( True )  )  :  (  ((\x1 ->  1) )(x0)  )  :  (  ((\x1 ->  8) )( True )  )  :  (  ((\x1 ->  1) )(x0)  )  :  (  ((\x1 ->  8) )( True )  )  :  []  )  else  (  (  ((\x1 ->  10) )( True )  )  :  (  ((\x1 ->  4) )( True )  )  :  (  ((\x1 ->  6) )( True )  )  :  (  ((\x1 ->  3) )( True )  )  :  (  ((\x1 ->  9) )(x0)  )  :  (  ((\x1 ->  9) )( False )  )  :  (  ((\x1 ->  3) )( False )  )  :  (  ((\x1 ->  8) )( True )  )  :  (  ((\x1 ->  5) )(x0)  )  :  (  ((\x1 ->  3) )( True )  )  :  (  ((\x1 ->  1) )(x0)  )  :  (  ((\x1 ->  9) )( True )  )  :  (  ((\x1 ->  4) )(x0)  )  :  (  ((\x1 ->  3) )(x0)  )  :  (  ((\x1 ->  4) )( False )  )  :  (  ((\x1 ->  9) )( False )  )  :  (  ((\x1 ->  6) )( False )  )  :  (  ((\x1 ->  10) )(x0)  )  :  (  ((\x1 ->  8) )(x0)  )  :  (  ((\x1 ->  6) )(x0)  )  :  (  ((\x1 ->  3) )( False )  )  :  (  ((\x1 ->  8) )( False )  )  :  (  ((\x1 ->  4) )( True )  )  :  (  ((\x1 ->  1) )(x0)  )  :  (  ((\x1 ->  9) )( False )  )  :  (  ((\x1 ->  6) )( False )  )  :  (  ((\x1 ->  7) )(x0)  )  :  (  ((\x1 ->  2) )( False )  )  :  []  ) ) )