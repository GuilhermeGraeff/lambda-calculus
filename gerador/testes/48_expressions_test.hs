main :: IO ()
main = print ( ((\x0 ->   let x1 =  True  in  True ) )( if  if  False  then  True  else  True  then  ( head ( (  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   False ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   True ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   True ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   True ) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   False ) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   True ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   True ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   True ) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   False ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   True ) )( True ) )  )  :  []  ) ) )  else  ((\x0 ->   ((\x1 ->  x0) )( ((\x1 ->   False ) )(x0) ) ) )( True ) ) )