main :: IO ()
main = print ( let x0 =  ( head ( (  (  if  True  then  ((\x0 ->   ((\x1 ->  10) )( True ) ) )( (  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  ) )  else  ((\x0 ->   ((\x1 ->  1) )( True ) ) )( (  (  True  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  10) )( False ) ) )( (  (  False  )  :  (  True  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  7) )( True ) ) )( (  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  10) )( True ) ) )( (  (  False  )  :  (  True  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  1) )( True ) ) )( (  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  3) )( True ) ) )( (  (  True  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  9) )( False ) ) )( (  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  3) )( True ) ) )( (  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  1) )( True ) ) )( (  (  False  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->  3) )( True ) ) )( (  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  []  ) )  )  :  []  ) ) )  in  let x0 =  ((\x0 ->   (  (  False  )  :  (  False  )  :  ( x0 )  :  (  True  )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  (  True  )  :  ( x0 )  :  (  False  )  :  (  True  )  :  ( x0 )  :  []  ) ) )( True )  in  ( head ( (  (  ((\x0 ->   ((\x1 ->   False ) )( ((\x1 ->   True ) )(7) ) ) )( ((\x0 ->   ((\x1 ->  6) )( True ) ) )( (  ( 4 )  :  ( 1 )  :  ( 5 )  :  ( 6 )  :  ( 2 )  :  ( 1 )  :  ( 5 )  :  ( 4 )  :  ( 6 )  :  ( 5 )  :  []  ) ) )  )  :  []  ) ) ) )