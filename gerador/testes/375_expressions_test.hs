main :: IO ()
main = print ( if  ( head ( (  (  let x0 = 9 in  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  ) ) )  then  (  let x0 =  False  in  ((\x1 ->   ((\x2 ->   (  ( 1 )  :  []  ) ) )( (  ( 3 )  :  []  ) ) ) )( (  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->   False ) )(x0)  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->  x1) )(x0)  )  :  (  ((\x1 ->  x1) )(x0)  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->   False ) )(x0)  )  :  (  ((\x1 ->   False ) )( True )  )  :  (  ((\x1 ->   True ) )( False )  )  :  (  ((\x1 ->   True ) )(x0)  )  :  (  ((\x1 ->  x1) )(x0)  )  :  []  ) )  )  else  let x0 =  ( head ( (  (  (  (  False  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  )  )  :  (  (  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  )  )  :  (  (  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  )  )  :  (  (  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  )  )  :  (  (  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  []  )  )  :  []  ) ) )  in  let x1 = 5 in  ((\x2 ->   ((\x3 ->   (  ( x1 )  :  ( 6 )  :  ( x1 )  :  ( 7 )  :  ( 6 )  :  ( x1 )  :  ( x1 )  :  []  ) ) )( (  ( x1 )  :  ( x1 )  :  []  ) ) ) )( (  (  ((\x2 ->   True ) )( True )  )  :  (  ((\x2 ->  x2) )( True )  )  :  (  ((\x2 ->  x2) )( False )  )  :  (  ((\x2 ->   True ) )( False )  )  :  (  ((\x2 ->  x2) )( False )  )  :  (  ((\x2 ->   False ) )( False )  )  :  (  ((\x2 ->   True ) )( False )  )  :  (  ((\x2 ->   True ) )( True )  )  :  (  ((\x2 ->  x2) )( False )  )  :  (  ((\x2 ->   True ) )( True )  )  :  []  ) ) )