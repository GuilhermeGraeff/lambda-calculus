main :: IO ()
main = print ( if  (  let x0 = 5 in  True  )  then  let x0 =  if  False  then  (  ( 7 )  :  ( 7 )  :  ( 4 )  :  ( 5 )  :  ( 3 )  :  ( 3 )  :  ( 8 )  :  ( 4 )  :  ( 8 )  :  ( 3 )  :  []  )  else  (  ( 7 )  :  ( 1 )  :  ( 7 )  :  ( 1 )  :  ( 10 )  :  ( 6 )  :  ( 10 )  :  ( 2 )  :  ( 10 )  :  ( 7 )  :  []  )  in  ( head ( (  (  (  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  []  )  )  :  (  (  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  []  )  )  :  (  (  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  []  )  )  :  (  (  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  []  )  )  :  (  (  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  []  )  )  :  []  ) ) )  else  let x0 =  let x0 =  True  in  (  (  True  )  :  (  True  )  :  (  True  )  :  ( x0 )  :  ( x0 )  :  (  True  )  :  ( x0 )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  (  False  )  :  (  True  )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  (  True  )  :  (  True  )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  []  )  in  ((\x0 ->   (  (  ((\x1 ->   False ) )(x0)  )  :  (  ((\x1 ->  x1) )(x0)  )  :  (  ((\x1 ->   False ) )(x0)  )  :  (  ((\x1 ->   True ) )( True )  )  :  []  ) ) )( False ) )