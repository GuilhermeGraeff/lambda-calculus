main :: IO ()
main = print ( let x0 =  ((\x0 ->   ((\x1 ->   ((\x2 ->  7) )(x0) ) )( ((\x1 ->  1) )(7) ) ) )( let x0 = 8 in  False )  in  let x0 =  ( head ( (  (  ((\x0 ->  x0) )(5)  )  :  (  ((\x0 ->  3) )(2)  )  :  (  ((\x0 ->  7) )(3)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  x0) )(7)  )  :  (  ((\x0 ->  10) )(10)  )  :  (  ((\x0 ->  2) )(9)  )  :  (  ((\x0 ->  2) )(7)  )  :  (  ((\x0 ->  2) )(1)  )  :  (  ((\x0 ->  x0) )(7)  )  :  (  ((\x0 ->  x0) )(10)  )  :  (  ((\x0 ->  x0) )(10)  )  :  (  ((\x0 ->  1) )(1)  )  :  (  ((\x0 ->  2) )(4)  )  :  (  ((\x0 ->  3) )(3)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  x0) )(8)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  x0) )(10)  )  :  (  ((\x0 ->  x0) )(3)  )  :  (  ((\x0 ->  4) )(8)  )  :  (  ((\x0 ->  x0) )(2)  )  :  (  ((\x0 ->  3) )(10)  )  :  (  ((\x0 ->  x0) )(10)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  x0) )(1)  )  :  (  ((\x0 ->  6) )(5)  )  :  (  ((\x0 ->  7) )(6)  )  :  (  ((\x0 ->  x0) )(3)  )  :  (  ((\x0 ->  x0) )(2)  )  :  (  ((\x0 ->  6) )(9)  )  :  (  ((\x0 ->  x0) )(1)  )  :  (  ((\x0 ->  x0) )(7)  )  :  (  ((\x0 ->  x0) )(4)  )  :  (  ((\x0 ->  9) )(1)  )  :  (  ((\x0 ->  x0) )(10)  )  :  (  ((\x0 ->  7) )(1)  )  :  (  ((\x0 ->  x0) )(4)  )  :  (  ((\x0 ->  x0) )(9)  )  :  []  ) ) )  in  let x0 =  True  in  ((\x1 ->   False ) )( True ) )