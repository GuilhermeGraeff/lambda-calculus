main :: IO ()
main = print ( if  ( head ( (  (  let x0 =  False  in  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  ) ) )  then  (  ( head ( (  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  x1) )( False ) ) )(8) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->   False ) )( False ) ) )(1) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->   True ) )( False ) ) )(6) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  x1) )( True ) ) )(9) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->   False ) )( False ) ) )(5) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  x1) )( False ) ) )(1) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->   True ) )( False ) ) )(9) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->   True ) )( True ) ) )(3) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  x1) )( False ) ) )(3) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->   False ) )( True ) ) )(2) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->   True ) )( True ) ) )(2) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  x1) )( False ) ) )(1) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  x1) )( True ) ) )(6) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  x1) )( False ) ) )(5) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->   True ) )( True ) ) )(7) )  )  :  []  ) ) )  )  else  (  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->   True ) )( True ) ) )(2) )  )  ) )