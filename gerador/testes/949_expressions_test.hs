main :: IO ()
main = print ( let x0 =  (  if  False  then  ((\x0 ->   (  ( 1 )  :  ( 2 )  :  ( 6 )  :  ( 1 )  :  ( 4 )  :  ( 9 )  :  ( 7 )  :  ( 1 )  :  ( 6 )  :  ( 4 )  :  ( 9 )  :  ( 4 )  :  ( 5 )  :  []  ) ) )( ((\x0 ->   True ) )(7) )  else  ((\x0 ->   (  ( 2 )  :  ( 9 )  :  ( 1 )  :  ( 1 )  :  ( 3 )  :  ( 3 )  :  ( 5 )  :  ( 5 )  :  ( 10 )  :  []  ) ) )( ((\x0 ->   True ) )(8) )  )  in  let x0 =  False  &&  False  in  ((\x1 ->   (  (  ((\x2 ->   ((\x3 ->  5) )(10) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  1) )(x1) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  7) )(4) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  5) )(x1) ) )( False )  )  :  (  ((\x2 ->   ((\x3 ->  4) )(x1) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(8) ) )( True )  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(9) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(2) ) )( True )  )  :  (  ((\x2 ->   ((\x3 ->  5) )(6) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )( False )  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )( False )  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(1) ) )( True )  )  :  (  ((\x2 ->   ((\x3 ->  4) )(4) ) )( False )  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )( True )  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )( True )  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )(x0)  )  :  (  ((\x2 ->   ((\x3 ->  x3) )(x1) ) )( True )  )  :  []  ) ) )(10) )