main :: IO ()
main = print ( if  ( head ( (  (  (  False  )  )  :  (  True  )  :  []  ) ) )  then  let x0 =  let x0 = 10 in  True  in  (  (  (  ((\x0 ->   ((\x1 ->   True ) )( False ) ) )( (  ( 6 )  :  ( 5 )  :  ( 8 )  :  ( 10 )  :  ( 5 )  :  ( 9 )  :  ( 8 )  :  ( 6 )  :  ( 3 )  :  ( 6 )  :  ( 9 )  :  ( 6 )  :  ( 10 )  :  ( 10 )  :  []  ) )  )  :  []  )  )  else  let x0 =  ((\x0 ->   ((\x1 ->  2) )(x0) ) )( False )  in  let x0 =  True  in  (  (  ((\x1 ->   ((\x2 ->  x2) )(x0) ) )( (  ( 3 )  :  ( 6 )  :  ( 9 )  :  ( 1 )  :  ( 5 )  :  ( 3 )  :  ( 9 )  :  ( 10 )  :  ( 6 )  :  ( 1 )  :  ( 9 )  :  ( 2 )  :  ( 1 )  :  ( 7 )  :  ( 5 )  :  ( 5 )  :  ( 9 )  :  ( 5 )  :  ( 3 )  :  ( 1 )  :  ( 6 )  :  ( 6 )  :  ( 4 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( (  ( 9 )  :  ( 1 )  :  ( 4 )  :  ( 2 )  :  ( 4 )  :  ( 5 )  :  ( 4 )  :  ( 5 )  :  ( 6 )  :  ( 2 )  :  ( 4 )  :  ( 1 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( True ) ) )( (  ( 7 )  :  ( 7 )  :  ( 9 )  :  ( 10 )  :  ( 1 )  :  ( 10 )  :  ( 10 )  :  ( 7 )  :  ( 3 )  :  ( 4 )  :  ( 9 )  :  ( 7 )  :  ( 4 )  :  ( 8 )  :  ( 6 )  :  ( 2 )  :  ( 5 )  :  ( 6 )  :  ( 3 )  :  ( 7 )  :  ( 4 )  :  ( 1 )  :  ( 8 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( (  ( 2 )  :  ( 1 )  :  ( 4 )  :  ( 3 )  :  ( 4 )  :  ( 5 )  :  ( 7 )  :  ( 7 )  :  ( 7 )  :  ( 10 )  :  ( 9 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( True ) ) )( (  ( 3 )  :  ( 10 )  :  ( 8 )  :  ( 3 )  :  ( 9 )  :  ( 9 )  :  ( 10 )  :  ( 2 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( (  ( 8 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( False ) ) )( (  ( 6 )  :  ( 4 )  :  ( 6 )  :  ( 3 )  :  ( 1 )  :  ( 1 )  :  ( 4 )  :  ( 9 )  :  ( 3 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( False ) ) )( (  ( 5 )  :  ( 9 )  :  ( 4 )  :  ( 8 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( True ) ) )( (  ( 10 )  :  ( 1 )  :  ( 4 )  :  ( 6 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(x0) ) )( (  ( 9 )  :  ( 9 )  :  ( 6 )  :  ( 9 )  :  ( 6 )  :  ( 3 )  :  ( 5 )  :  ( 10 )  :  ( 4 )  :  ( 2 )  :  ( 5 )  :  ( 6 )  :  ( 8 )  :  ( 2 )  :  ( 8 )  :  ( 7 )  :  ( 3 )  :  ( 2 )  :  ( 4 )  :  ( 1 )  :  ( 9 )  :  ( 5 )  :  ( 10 )  :  ( 4 )  :  ( 2 )  :  ( 4 )  :  ( 7 )  :  ( 9 )  :  ( 1 )  :  ( 1 )  :  ( 3 )  :  ( 4 )  :  ( 10 )  :  ( 10 )  :  ( 10 )  :  ( 2 )  :  ( 2 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(x0) ) )( (  ( 1 )  :  ( 2 )  :  ( 8 )  :  ( 1 )  :  ( 8 )  :  ( 8 )  :  ( 8 )  :  ( 5 )  :  ( 1 )  :  ( 4 )  :  ( 2 )  :  ( 6 )  :  ( 1 )  :  ( 6 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( False ) ) )( (  ( 10 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(x0) ) )( (  ( 5 )  :  ( 1 )  :  ( 5 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(x0) ) )( (  ( 7 )  :  ( 2 )  :  ( 1 )  :  ( 8 )  :  ( 2 )  :  ( 2 )  :  ( 5 )  :  ( 7 )  :  ( 10 )  :  ( 2 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(x0) ) )( (  ( 4 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( True ) ) )( (  ( 6 )  :  ( 3 )  :  ( 3 )  :  ( 5 )  :  ( 6 )  :  ( 3 )  :  ( 3 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( (  ( 8 )  :  ( 4 )  :  ( 3 )  :  ( 6 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(x0) ) )( (  ( 9 )  :  ( 8 )  :  ( 10 )  :  ( 9 )  :  ( 6 )  :  ( 5 )  :  ( 9 )  :  ( 4 )  :  ( 6 )  :  ( 6 )  :  ( 5 )  :  ( 3 )  :  ( 1 )  :  ( 7 )  :  ( 2 )  :  ( 7 )  :  ( 6 )  :  ( 2 )  :  ( 4 )  :  ( 7 )  :  ( 9 )  :  ( 5 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( False ) ) )( (  ( 4 )  :  ( 1 )  :  ( 10 )  :  ( 6 )  :  ( 4 )  :  ( 5 )  :  ( 5 )  :  ( 6 )  :  ( 1 )  :  ( 5 )  :  ( 8 )  :  ( 4 )  :  ( 8 )  :  ( 7 )  :  ( 8 )  :  ( 5 )  :  ( 1 )  :  ( 9 )  :  ( 2 )  :  ( 6 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(x0) ) )( (  ( 8 )  :  ( 10 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( (  ( 9 )  :  ( 7 )  :  ( 4 )  :  ( 3 )  :  ( 10 )  :  ( 8 )  :  ( 7 )  :  ( 10 )  :  ( 10 )  :  ( 10 )  :  ( 4 )  :  ( 4 )  :  ( 8 )  :  ( 8 )  :  ( 6 )  :  ( 6 )  :  ( 1 )  :  ( 6 )  :  ( 8 )  :  ( 4 )  :  ( 1 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(x0) ) )( (  ( 9 )  :  ( 10 )  :  ( 9 )  :  ( 3 )  :  ( 2 )  :  ( 4 )  :  ( 1 )  :  ( 7 )  :  ( 9 )  :  ( 5 )  :  ( 7 )  :  ( 9 )  :  ( 10 )  :  ( 9 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )(x0) ) )( (  ( 9 )  :  ( 9 )  :  ( 10 )  :  ( 8 )  :  ( 1 )  :  ( 6 )  :  ( 5 )  :  ( 7 )  :  ( 5 )  :  ( 4 )  :  ( 9 )  :  ( 8 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( True ) ) )( (  ( 3 )  :  ( 3 )  :  ( 9 )  :  ( 7 )  :  ( 1 )  :  ( 1 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( (  ( 7 )  :  ( 5 )  :  ( 7 )  :  ( 10 )  :  ( 2 )  :  ( 4 )  :  ( 1 )  :  ( 2 )  :  ( 6 )  :  ( 7 )  :  ( 8 )  :  ( 9 )  :  ( 6 )  :  ( 4 )  :  ( 10 )  :  ( 6 )  :  ( 9 )  :  ( 8 )  :  ( 10 )  :  ( 1 )  :  ( 10 )  :  ( 4 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( False ) ) )( (  ( 8 )  :  ( 10 )  :  ( 2 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )(x0) ) )( (  ( 9 )  :  ( 7 )  :  ( 1 )  :  ( 3 )  :  ( 5 )  :  ( 4 )  :  ( 5 )  :  ( 1 )  :  ( 1 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(x0) ) )( (  ( 9 )  :  ( 10 )  :  ( 6 )  :  ( 1 )  :  ( 10 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )( True ) ) )( (  ( 4 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( False ) ) )( (  ( 2 )  :  ( 7 )  :  ( 3 )  :  ( 1 )  :  ( 6 )  :  ( 4 )  :  ( 7 )  :  ( 6 )  :  ( 7 )  :  ( 6 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( False ) ) )( (  ( 2 )  :  ( 9 )  :  ( 2 )  :  ( 2 )  :  ( 6 )  :  ( 2 )  :  ( 4 )  :  ( 9 )  :  ( 6 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x2) )( True ) ) )( (  ( 6 )  :  ( 3 )  :  ( 4 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(x0) ) )( (  ( 6 )  :  ( 9 )  :  ( 2 )  :  ( 6 )  :  ( 1 )  :  ( 3 )  :  ( 4 )  :  ( 3 )  :  ( 3 )  :  ( 6 )  :  ( 1 )  :  ( 6 )  :  ( 2 )  :  ( 1 )  :  ( 9 )  :  ( 7 )  :  ( 5 )  :  ( 4 )  :  ( 3 )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )( True ) ) )( (  ( 10 )  :  ( 6 )  :  ( 1 )  :  ( 6 )  :  ( 3 )  :  ( 1 )  :  ( 4 )  :  ( 1 )  :  ( 3 )  :  ( 7 )  :  ( 8 )  :  ( 4 )  :  ( 6 )  :  ( 1 )  :  []  ) )  )  :  []  ) )