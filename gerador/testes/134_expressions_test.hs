main :: IO ()
main = print ( if  let x0 =  False  &&  False  in  ( head ( (  (  False  )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  (  False  )  :  []  ) ) )  then  if  let x0 =  False  in x0 then  let x0 =  True  in  ((\x1 ->   (  ( x0 )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  (  True  )  :  ( x0 )  :  (  True  )  :  (  True  )  :  ( x0 )  :  ( x0 )  :  []  ) ) )( (  (  ((\x1 ->  10) )(x0)  )  :  (  ((\x1 ->  5) )(x0)  )  :  (  ((\x1 ->  5) )(x0)  )  :  (  ((\x1 ->  1) )(x0)  )  :  (  ((\x1 ->  8) )(x0)  )  :  (  ((\x1 ->  10) )(x0)  )  :  (  ((\x1 ->  8) )(x0)  )  :  (  ((\x1 ->  1) )(x0)  )  :  (  ((\x1 ->  8) )( True )  )  :  (  ((\x1 ->  6) )( True )  )  :  (  ((\x1 ->  9) )( True )  )  :  []  ) )  else  (  ((\x0 ->   (  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  []  ) ) )( (  (  ((\x0 ->  4) )( True )  )  :  []  ) )  )  else  ((\x0 ->   ((\x1 ->   (  ( x0 )  :  []  ) ) )( (  (  ((\x1 ->  3) )(x0)  )  :  (  ((\x1 ->  1) )( False )  )  :  (  ((\x1 ->  5) )(x0)  )  :  (  ((\x1 ->  6) )(x0)  )  :  (  ((\x1 ->  6) )( True )  )  :  []  ) ) ) )( if  True  then  True  else  False ) )