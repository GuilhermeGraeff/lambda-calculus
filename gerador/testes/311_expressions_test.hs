main :: IO ()
main = print ( if  if  if  False  then  True  else  True  then  False  ||  False  else  if  False  then  True  else  True  then  let x0 =  if  False  then  False  else  True  in  ((\x0 ->   ((\x1 ->   (  (  (  ( 6 )  :  ( 6 )  :  ( x0 )  :  ( 2 )  :  ( 9 )  :  ( 6 )  :  ( x0 )  :  ( 7 )  :  ( x0 )  :  ( 9 )  :  ( 2 )  :  ( x0 )  :  ( x0 )  :  ( 4 )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  ( 5 )  :  ( 7 )  :  ( x0 )  :  ( x0 )  :  []  )  )  :  []  ) ) )( (  (  (  (  True  )  :  (  True  )  :  []  )  )  :  []  ) ) ) )(3)  else  ( head ( (  (  if  False  then  ((\x0 ->   (  (  (  ( 10 )  :  ( 9 )  :  ( 6 )  :  ( 4 )  :  ( 3 )  :  ( 8 )  :  []  )  )  :  []  ) ) )( (  (  (  (  False  )  :  (  True  )  :  []  )  )  :  []  ) )  else  ((\x0 ->   (  (  (  ( 5 )  :  []  )  )  :  (  (  ( 4 )  :  ( 4 )  :  ( 2 )  :  ( 7 )  :  ( 4 )  :  ( 9 )  :  ( 4 )  :  ( 3 )  :  ( 9 )  :  []  )  )  :  (  (  ( 9 )  :  ( 6 )  :  ( 10 )  :  ( 4 )  :  ( 8 )  :  ( 1 )  :  ( 5 )  :  ( 9 )  :  ( 4 )  :  []  )  )  :  (  (  ( 6 )  :  ( 6 )  :  []  )  )  :  (  (  ( 7 )  :  ( 9 )  :  ( 7 )  :  ( 7 )  :  ( 4 )  :  ( 8 )  :  ( 8 )  :  ( 6 )  :  ( 7 )  :  ( 5 )  :  ( 1 )  :  ( 3 )  :  ( 6 )  :  ( 4 )  :  []  )  )  :  (  (  ( 7 )  :  ( 8 )  :  ( 9 )  :  ( 9 )  :  ( 4 )  :  ( 5 )  :  ( 6 )  :  ( 5 )  :  []  )  )  :  (  (  ( 9 )  :  ( 8 )  :  ( 4 )  :  ( 2 )  :  ( 1 )  :  ( 9 )  :  ( 4 )  :  ( 4 )  :  []  )  )  :  (  (  ( 5 )  :  ( 9 )  :  ( 4 )  :  ( 9 )  :  ( 3 )  :  ( 6 )  :  []  )  )  :  (  (  ( 4 )  :  ( 6 )  :  []  )  )  :  (  (  ( 5 )  :  ( 1 )  :  ( 3 )  :  ( 6 )  :  ( 9 )  :  []  )  )  :  (  (  ( 6 )  :  ( 3 )  :  ( 6 )  :  ( 6 )  :  ( 9 )  :  ( 10 )  :  ( 7 )  :  ( 4 )  :  ( 3 )  :  ( 1 )  :  ( 8 )  :  ( 10 )  :  ( 5 )  :  ( 8 )  :  ( 5 )  :  ( 6 )  :  ( 6 )  :  ( 5 )  :  ( 7 )  :  ( 6 )  :  ( 9 )  :  ( 2 )  :  []  )  )  :  []  ) ) )( (  (  (  (  True  )  :  (  True  )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  []  )  )  :  []  ) )  )  :  (  ((\x0 ->   (  (  (  ( 10 )  :  ( 4 )  :  ( 10 )  :  ( 10 )  :  ( 6 )  :  ( 3 )  :  ( 8 )  :  ( 10 )  :  ( 4 )  :  ( 8 )  :  ( 8 )  :  ( 8 )  :  ( 3 )  :  ( 9 )  :  ( 9 )  :  ( 6 )  :  []  )  )  :  []  ) ) )( (  (  (  (  False  )  :  []  )  )  :  (  (  (  True  )  :  (  True  )  :  (  False  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  True  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  )  )  :  []  ) )  )  :  []  ) ) ) )