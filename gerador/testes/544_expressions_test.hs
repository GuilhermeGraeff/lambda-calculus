main :: IO ()
main = print ( let x0 =  (  ((\x0 ->   ((\x1 ->  3) )( ((\x1 ->  x0) )(1) ) ) )( False )  )  in  if  if  True  then  False  else  False  then  let x1 =  False  in  ((\x2 ->   ((\x3 ->   (  ( 9 )  :  []  ) ) )( (  ( 2 )  :  ( 3 )  :  ( 8 )  :  ( 1 )  :  ( 2 )  :  ( 7 )  :  ( 10 )  :  ( 3 )  :  ( 8 )  :  ( 10 )  :  ( 4 )  :  ( 9 )  :  ( 6 )  :  ( 3 )  :  ( 3 )  :  ( 9 )  :  ( 3 )  :  ( 4 )  :  ( 8 )  :  ( 2 )  :  ( 6 )  :  ( 4 )  :  ( 4 )  :  ( 4 )  :  []  ) ) ) )( ((\x2 ->   (  ( x1 )  :  ( x1 )  :  ( x1 )  :  (  True  )  :  (  True  )  :  ( x1 )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  ) ) )( ((\x2 ->   True ) )(x1) ) )  else  if  True  then  ((\x1 ->   ((\x2 ->   (  ( 6 )  :  ( 5 )  :  []  ) ) )( (  ( 4 )  :  ( 6 )  :  ( 1 )  :  ( 10 )  :  []  ) ) ) )( ((\x1 ->   (  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  []  ) ) )( ((\x1 ->  x1) )( False ) ) )  else  ((\x1 ->   ((\x2 ->   (  ( 4 )  :  []  ) ) )( (  ( 10 )  :  ( 8 )  :  ( 2 )  :  ( 6 )  :  ( 8 )  :  ( 3 )  :  ( 7 )  :  ( 8 )  :  []  ) ) ) )( ((\x1 ->   (  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  []  ) ) )( ((\x1 ->  x1) )( True ) ) ) )