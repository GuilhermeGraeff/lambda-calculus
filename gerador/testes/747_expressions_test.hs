main :: IO ()
main = print ( if  False  &&  False  then  ( head ( (  (  if  False  then  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  1) )( False ) ) )( False ) )  else  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  2) )(x0) ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  10) )(x0) ) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  7) )( False ) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  8) )(x0) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  7) )(x0) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  8) )( False ) ) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  5) )(x0) ) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  6) )(x0) ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  4) )(x0) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  7) )( False ) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  7) )( True ) ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  9) )( True ) ) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  7) )(x0) ) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  10) )( False ) ) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  4) )(x0) ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  4) )( False ) ) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  1) )( False ) ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  4) )( False ) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  8) )( False ) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  9) )( True ) ) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  3) )(x0) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  10) )( True ) ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  5) )( True ) ) )( True ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  9) )(x0) ) )( False ) )  )  :  (  ((\x0 ->   False ) )( ((\x0 ->   ((\x1 ->  10) )(x0) ) )( False ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  10) )(x0) ) )( True ) )  )  :  (  ((\x0 ->   True ) )( ((\x0 ->   ((\x1 ->  4) )( False ) ) )( True ) )  )  :  []  ) ) )  else  let x0 =  ( head ( (  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( False )  )  :  []  ) ) )  in  let x1 = 4 in  ((\x2 ->   True ) )( ((\x2 ->   ((\x3 ->  x1) )( True ) ) )( True ) ) )