main :: IO ()
main = print ( ((\x0 ->   (  (  (  False  )  :  (  False  )  :  (  False  )  :  []  )  ) ) )( (  let x0 = 1 in  (  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->   True ) )( False )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->   True ) )( False )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->   True ) )( True )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   True ) )( False )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   True ) )( True )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->   True ) )( True )  )  :  (  ((\x1 ->   True ) )( True )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   True ) )( False )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->   True ) )( False )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->  x1) )( False )  )  :  (  ((\x1 ->   True ) )( True )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   False ) )( False )  )  :  (  ((\x1 ->   True ) )( True )  )  :  (  ((\x1 ->   False ) )( True )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->  x1) )( True )  )  :  (  ((\x1 ->   True ) )( False )  )  :  (  ((\x1 ->  x1) )( True )  )  :  []  )  ) ) )