main :: IO ()
main = print ( if  let x0 =  ((\x0 ->   (  ( 4 )  :  ( 5 )  :  ( 7 )  :  ( 7 )  :  ( 3 )  :  ( 2 )  :  []  ) ) )( True )  in  True  ||  True  then  if  if  True  then  False  else  True  then  (  ((\x0 ->   False ) )( (  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   False ) )( False )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   False ) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  (  ((\x0 ->  x0) )( False )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( False )  )  :  (  ((\x0 ->   True ) )( True )  )  :  (  ((\x0 ->  x0) )( True )  )  :  []  ) )  )  else  let x0 =  True  in  ((\x1 ->  x0) )( (  (  ((\x1 ->   False ) )( True )  )  :  (  ((\x1 ->  x1) )(x0)  )  :  (  ((\x1 ->  x1) )(x0)  )  :  (  ((\x1 ->  x1) )(x0)  )  :  []  ) )  else  ((\x0 ->   ((\x1 ->   True ) )( (  (  ((\x1 ->  x1) )( False )  )  :  []  ) ) ) )( (  ((\x0 ->  1) )( True )  ) ) )