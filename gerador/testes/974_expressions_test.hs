main :: IO ()
main = print ( let x0 =  True  in  if  True  then  ((\x0 ->   (  (  (  ( x0 )  :  (  False  )  :  (  True  )  :  []  )  )  :  (  (  (  True  )  :  ( x0 )  :  ( x0 )  :  []  )  )  :  (  (  (  False  )  :  ( x0 )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  []  )  )  :  (  (  ( x0 )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  ( x0 )  :  []  )  )  :  (  (  ( x0 )  :  (  True  )  :  ( x0 )  :  (  True  )  :  (  True  )  :  ( x0 )  :  (  True  )  :  (  False  )  :  []  )  )  :  []  ) ) )( False )  else  (  (  (  (  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  []  )  )  :  (  (  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  []  )  )  :  (  (  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  []  )  )  :  (  (  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  )  )  :  []  )  ) )