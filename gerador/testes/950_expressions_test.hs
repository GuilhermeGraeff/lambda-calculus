main :: IO ()
main = print ( let x0 =  ( head ( (  (  ( head ( (  (  ((\x0 ->   ((\x1 ->  x1) )( True ) ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( True ) ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( True ) ) )( ((\x0 ->   False ) )( False ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( False ) ) )( ((\x0 ->  x0) )( False ) )  )  :  []  ) ) )  )  :  (  ((\x0 ->   ((\x1 ->   False ) )( False ) ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( False ) ) )( ((\x0 ->  x0) )( False ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( True ) ) )( ((\x0 ->   True ) )( False ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( True ) ) )( ((\x0 ->   False ) )( False ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( False ) ) )( ((\x0 ->   False ) )( False ) )  )  :  (  ((\x0 ->   ((\x1 ->   True ) )( True ) ) )( ((\x0 ->   True ) )( True ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( False ) ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   ((\x1 ->   False ) )( False ) ) )( ((\x0 ->   True ) )( False ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( False ) ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   ((\x1 ->  x1) )( True ) ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   ((\x1 ->   False ) )( False ) ) )( ((\x0 ->  x0) )( True ) )  )  :  (  ((\x0 ->   ((\x1 ->   True ) )( True ) ) )( ((\x0 ->  x0) )( False ) )  )  :  []  ) ) )  in  if  ((\x0 ->   False ) )(5)  then  ( head ( (  (  True  )  :  (  True  )  :  (  False  )  :  []  ) ) )  else  ( head ( (  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  []  ) ) ) )