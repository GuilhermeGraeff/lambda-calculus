main :: IO ()
main = print ( ((\x0 ->   if  False  then  (  (  ((\x1 ->   ((\x2 ->  3) )( False ) ) )( (  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  4) )( False ) ) )( (  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  []  )  else  (  (  ((\x1 ->   ((\x2 ->  x0) )( False ) ) )( (  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  10) )( False ) ) )( (  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  8) )( False ) ) )( (  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x0) )( False ) ) )( (  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  2) )( True ) ) )( (  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  1) )( False ) ) )( (  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x0) )( True ) ) )( (  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x0) )( True ) ) )( (  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  2) )( False ) ) )( (  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x0) )( False ) ) )( (  (  True  )  :  (  True  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  2) )( False ) ) )( (  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x0) )( False ) ) )( (  (  False  )  :  (  False  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  x0) )( True ) ) )( (  (  False  )  :  (  True  )  :  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  4) )( False ) ) )( (  (  False  )  :  []  ) )  )  :  (  ((\x1 ->   ((\x2 ->  1) )( False ) ) )( (  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  []  ) )  )  :  []  ) ) )( ((\x0 ->  9) )( let x0 = 5 in  (  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  ) ) ) )