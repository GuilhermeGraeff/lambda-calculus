main :: IO ()
main = print ( let x0 =  let x0 =  ( head ( (  (  ((\x0 ->  2) )( True )  )  :  (  ((\x0 ->  10) )( False )  )  :  (  ((\x0 ->  3) )( True )  )  :  (  ((\x0 ->  4) )( False )  )  :  (  ((\x0 ->  8) )( False )  )  :  (  ((\x0 ->  4) )( False )  )  :  (  ((\x0 ->  2) )( False )  )  :  (  ((\x0 ->  7) )( True )  )  :  []  ) ) )  in  if  False  then  (  ( 3 )  :  ( 5 )  :  ( 9 )  :  ( 3 )  :  ( 1 )  :  ( 5 )  :  []  )  else  (  ( 9 )  :  ( 7 )  :  ( 3 )  :  ( 5 )  :  ( 8 )  :  ( 4 )  :  ( 4 )  :  ( 1 )  :  ( 4 )  :  ( 9 )  :  ( 4 )  :  ( 9 )  :  ( 2 )  :  []  )  in  ((\x0 ->   (  (  ((\x1 ->   ((\x2 ->   True ) )(9) ) )( ((\x1 ->  3) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(10) ) )( ((\x1 ->  3) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(1) ) )( ((\x1 ->  3) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(5) ) )( ((\x1 ->  3) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(10) ) )( ((\x1 ->  3) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(2) ) )( ((\x1 ->  5) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(3) ) )( ((\x1 ->  2) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(10) ) )( ((\x1 ->  2) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(9) ) )( ((\x1 ->  3) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(1) ) )( ((\x1 ->  2) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(8) ) )( ((\x1 ->  3) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(8) ) )( ((\x1 ->  1) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(3) ) )( ((\x1 ->  4) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(5) ) )( ((\x1 ->  2) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(10) ) )( ((\x1 ->  1) )( True ) )  )  :  (  ((\x1 ->   ((\x2 ->   False ) )(4) ) )( ((\x1 ->  3) )( False ) )  )  :  (  ((\x1 ->   ((\x2 ->   True ) )(3) ) )( ((\x1 ->  2) )( True ) )  )  :  []  ) ) )( ( head