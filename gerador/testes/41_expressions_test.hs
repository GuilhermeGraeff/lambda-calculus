main :: IO ()
main = print ( let x0 =  if  True  &&  False  then  ((\x0 ->   ((\x1 ->   (  ( 7 )  :  ( 8 )  :  ( 1 )  :  ( 9 )  :  ( 9 )  :  ( 3 )  :  ( 2 )  :  ( 8 )  :  ( 3 )  :  ( 4 )  :  ( 5 )  :  ( 6 )  :  ( 2 )  :  ( 4 )  :  ( 3 )  :  ( 9 )  :  ( 10 )  :  ( 7 )  :  ( 10 )  :  ( 10 )  :  ( 9 )  :  []  ) ) )( True ) ) )( True )  else  let x0 =  True  in  ((\x1 ->   (  ( 2 )  :  ( 4 )  :  ( 1 )  :  []  ) ) )( True )  in  ( head ( (  (  let x0 = 5 in  ((\x1 ->   ((\x2 ->   True ) )( (  ( x1 )  :  (  False  )  :  ( x1 )  :  ( x1 )  :  (  True  )  :  ( x1 )  :  ( x1 )  :  (  False  )  :  (  False  )  :  (  True  )  :  ( x1 )  :  []  ) ) ) )( False )  )  :  (  ((\x0 ->   ((\x1 ->  x0) )( (  (  True  )  :  ( x0 )  :  (  True  )  :  (  True  )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  (  True  )  :  (  False  )  :  []  ) ) ) )( True )  )  :  (  ((\x0 ->   ((\x1 ->  x0) )( (  (  True  )  :  (  True  )  :  ( x0 )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  (  True  )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  []  ) ) ) )( False )  )  :  (  ((\x0 ->   ((\x1 ->  x0) )( (  ( x0 )  :  ( x0 )  :  ( x0 )  :  (  False  )  :  []  ) ) ) )( False )  )  :  (  ((\x0 ->   ((\x1 ->  x0) )( (  (  False  )  :  ( x0 )  :  []  ) ) ) )( True )  )  :  (  ((\x0 ->   ((\x1 ->   False ) )( (  ( x0 )  :  (  False  )  :  (  True  )  :  []  ) ) ) )( False )  )  :  (  ((\x0 ->   ((\x1 ->   False ) )( (  (  True  )  :  []  ) ) ) )( False )  )  :  (  ((\x0 ->   ((\x1 ->  x0) )( (  (  True  )  :  (  False  )  :  ( x0 )  :  (  False  )  :  (  False  )  :  ( x0 )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  (  True  )  :  (  True  )  :  ( x0 )  :  (  True  )  :  ( x0 )  :  ( x0 )  :  ( x0 )  :  (  True  )  :  (  True  )  :  (  False  )  :  ( x0 )  :  ( x0 )  :  []  ) ) ) )( True )  )  :  (  ((\x0 ->   ((\x1 ->  x0) )( (  ( x0 )  :  []  ) ) ) )( True )  )  :  (  ((\x0 ->   ((\x1 ->   True ) )( (  (  True  )  :  ( x0 )  :  []  ) ) ) )( False )  )  :  []  ) ) ) )