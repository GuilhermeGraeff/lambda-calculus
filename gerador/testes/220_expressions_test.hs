main :: IO ()
main = print ( if  let x0 =  ((\x0 ->   ((\x1 ->  2) )(2) ) )( True )  in  True  then  if  ((\x0 ->   False ) )(1)  then  ( head ( (  (  ((\x0 ->   ((\x1 ->   True ) )( (  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  []  ) ) ) )( (  (  ((\x0 ->  5) )(9)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  3) )(3)  )  :  (  ((\x0 ->  x0) )(3)  )  :  (  ((\x0 ->  5) )(8)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  3) )(10)  )  :  (  ((\x0 ->  x0) )(3)  )  :  (  ((\x0 ->  x0) )(1)  )  :  (  ((\x0 ->  10) )(5)  )  :  (  ((\x0 ->  7) )(5)  )  :  (  ((\x0 ->  3) )(4)  )  :  (  ((\x0 ->  10) )(9)  )  :  (  ((\x0 ->  x0) )(10)  )  :  (  ((\x0 ->  2) )(3)  )  :  (  ((\x0 ->  9) )(2)  )  :  (  ((\x0 ->  x0) )(6)  )  :  (  ((\x0 ->  x0) )(8)  )  :  (  ((\x0 ->  x0) )(5)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  6) )(8)  )  :  (  ((\x0 ->  x0) )(3)  )  :  (  ((\x0 ->  7) )(4)  )  :  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  6) )(9)  )  :  (  ((\x0 ->  4) )(9)  )  :  (  ((\x0 ->  5) )(2)  )  :  (  ((\x0 ->  x0) )(1)  )  :  (  ((\x0 ->  x0) )(1)  )  :  (  ((\x0 ->  3) )(2)  )  :  (  ((\x0 ->  x0) )(1)  )  :  (  ((\x0 ->  9) )(5)  )  :  (  ((\x0 ->  4) )(2)  )  :  (  ((\x0 ->  5) )(1)  )  :  (  ((\x0 ->  x0) )(1)  )  :  (  ((\x0 ->  x0) )(2)  )  :  (  ((\x0 ->  x0) )(10)  )  :  (  ((\x0 ->  4) )(2)  )  :  (  ((\x0 ->  x0) )(5)  )  :  []  ) )  )  :  (  ((\x0 ->   ((\x1 ->   True ) )( (  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  []  ) ) ) )( (  (  ((\x0 ->  6) )(9)  )  :  []  ) )  )  :  []  ) ) )  else  if  False  then  ((\x0 ->   ((\x1 ->   False ) )( (  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  (  True  )  :  []  ) ) ) )( (  (  ((\x0 ->  9) )(1)  )  :  (  ((\x0 ->  x0) )(3)  )  :  (  ((\x0 ->  x0) )(5)  )  :  (  ((\x0 ->  x0) )(3)  )  :  (  ((\x0 ->  3) )(4)  )  :  (  ((\x0 ->  x0) )(5)  )  :  (  ((\x0 ->  6) )(1)  )  :  (  ((\x0 ->  4) )(9)  )  :  (  ((\x0 ->  2) )(8)  )  :  (  ((\x0 ->  x0) )(8)  )  :  []  ) )  else  ((\x0 ->   ((\x1 ->   False ) )( (  (  False  )  :  (  False  )  :  (  True  )  :  (  False  )  :  (  False  )  :  (  True  )  :  (  True  )  :  (  True  )  :  []  ) ) ) )( (  (  ((\x0 ->  x0) )(9)  )  :  (  ((\x0 ->  5) )(2)  )  :  []  ) )  else  let x0 =  (  ((\x0 ->  x0) )(7)  )  in  ((\x1 ->   ((\x2 ->   ((\x3 ->   False ) )( (  (  True  )  :  (  False  )  :  (  False  )  :  []  ) ) ) )( (  (  ((\x2 ->  4) )(x1)  )  :  (  ((\x2 ->  x2) )(3)  )  :  (  ((\x2 ->  10) )(x1)  )  :  (  ((\x2 ->  6) )(x1)  )  :  (  ((\x2 ->  x2) )(7)  )  :  (  ((\x2 ->  3) )(2)  )  :  (  ((\x2 ->  x2) )(x1)  )  :  (  ((\x2 ->  9) )(x1)  )  :  (  ((\x2 ->  6) )(x1)  )  :  (  ((\x2 ->  9) )(9)  )  :  (  ((\x2 ->  x2) )(x1)  )  :  []  ) ) ) )(10) )